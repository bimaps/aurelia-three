import { PointCloudOctree } from '@pnext/three-loader';
import { ThreeCheckerConfigModel } from './../models/checker-config.model';
import { ThreeCheckerReportModel } from './../models/checker-report.model';
import { ThreeStyleModel } from './../models/style.model';
import { ThreeThemeModel, ThreeThemeModelRule } from './../models/theme.model';
import { ThreeStylingService } from './../themes/three-styling-service';
import { ThreeToolsService } from '../tools/three-tools-service';
import { ThreeSiteModel } from '../models/site.model';
import { ThreeCustomElement } from './three';
import * as THREE from 'three';
import { UxModalService } from '@aurelia-ux/modal';
import { CheckerFlowModel } from '../models/checkers/checker-internals';
export declare class ThreeAdmin {
    private element;
    private modalService;
    initialSiteId: string;
    private log;
    private sites;
    private currentSite;
    private checkers;
    private reports;
    private flows;
    private themes;
    private styles;
    private displayedTheme;
    private currentTheme;
    private currentThemeHasModifications;
    private currentRule;
    private currentStyle;
    private selectedObject;
    private fakeSlots;
    private mainButtonsContainer;
    three: ThreeCustomElement;
    private arNextMenu;
    toolbarCategory: 'navigation' | 'selection' | 'transform' | 'display';
    private currentOperation;
    private mouseOnViewer;
    private mouseX;
    private mouseY;
    private nbObjectsUnderMouse;
    private select;
    private translate;
    private rotate;
    private subscriptions;
    cursorTool: 'select' | 'translate' | 'rotate';
    toolsService: ThreeToolsService;
    stylingService: ThreeStylingService;
    constructor(element: Element, modalService: UxModalService);
    attached(): void;
    detached(): void;
    fixSlots(): void;
    getSites(): void;
    handleError(error: Error): void;
    generate(type: 'cube' | 'groundAnd3Cubes' | 'testAllGeometries'): void;
    deleteSite(site: ThreeSiteModel): void;
    saveSiteSettings(site: ThreeSiteModel): void;
    clearSiteData(siteId: string): Promise<any>;
    zoomOnScene(factor?: number, orientation?: '3d' | 'top', animate?: boolean, render?: boolean): void;
    createSite(): void;
    renameSite(site: ThreeSiteModel): void;
    selectSite(site: string | ThreeSiteModel): void;
    loadSite(siteId: string): void;
    saveSceneIntoSite(): Promise<void>;
    uploadingFile: boolean;
    uploadDataFromFile(): void;
    loadingFiles: number;
    loadFile(): void;
    selectObject(event: any): boolean;
    saveObjectProperties(object: THREE.Object3D): void;
    unselectObject(): void;
    removeSelectedObject(): void;
    removeObject(object: THREE.Object3D): void;
    clearAllLights(): void;
    addAmbiantLight(): void;
    addLight(): void;
    mouseEnter(event: MouseEvent): void;
    mouseLeave(event: MouseEvent): void;
    mouseMove(event: MouseEvent): void;
    handleCursor(type: 'hover' | 'click', intersections: THREE.Intersection[]): void;
    get hasObjects(): boolean;
    get selectedObjects(): Array<THREE.Object3D>;
    get hasPoints(): boolean;
    get points(): Array<PointCloudOctree>;
    get activeToolName(): string;
    get cameras(): THREE.Camera[];
    manualTranslate(): void;
    manualRotate(): void;
    selectionStyle: 'default';
    setSelectStyle(): void;
    loadPoints(): void;
    zoomPoints(): void;
    private getCheckers;
    private getFlows;
    createNewFlow(site: ThreeSiteModel): Promise<void>;
    editFlow(flow: CheckerFlowModel): Promise<void>;
    runChecker(event: MouseEvent, siteId: string, checkerId: string, pdf?: boolean): Promise<void>;
    createNewChecker(site: ThreeSiteModel): Promise<void>;
    editChecker(checker: ThreeCheckerConfigModel): Promise<void>;
    private getReports;
    runReport(event: MouseEvent, siteId: string, reportId: string, pdf?: boolean): Promise<void>;
    createNewReport(site: ThreeSiteModel): Promise<void>;
    editReport(report: ThreeCheckerReportModel): Promise<void>;
    arNextStyleEditor: HTMLElement;
    getThemes(): void;
    getStyles(): Promise<void>;
    createNewTheme(): void;
    arNextThemeEditor: HTMLElement;
    noTheme(): void;
    displayTheme(theme: ThreeThemeModel): void;
    selectTheme(theme: ThreeThemeModel): void;
    saveTheme(theme: ThreeThemeModel): void;
    themeModified(theme: ThreeThemeModel): void;
    editThemeName(theme: ThreeThemeModel): void;
    deleteTheme(theme: ThreeThemeModel): void;
    selectRule(rule: ThreeThemeModelRule): void;
    addRule(theme: ThreeThemeModel): void;
    editRuleName(theme: ThreeThemeModel, rule: ThreeThemeModelRule): void;
    deleteRule(theme: ThreeThemeModel, rule: ThreeThemeModelRule): void;
    selectStyle(style: ThreeStyleModel): void;
    createNewStyle(): void;
    saveStyle(style: ThreeStyleModel, index: number): void;
    deleteStyle(style: ThreeStyleModel): void;
    openViewer(): void;
    exportSettings(): void;
    importSettings(): Promise<void>;
}
